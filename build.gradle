import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.regex.Matcher

plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.google.cloud.tools.jib' version '3.1.4'
	id 'org.unbroken-dome.helm' version "1.6.1" apply true
	id 'org.unbroken-dome.helm-releases' version "1.6.1" apply true
	id 'org.unbroken-dome.helm-publish' version "1.6.1" apply true
	id 'java'
//	id 'war'
}

group = 'com.learn.time'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-batch:2.5.5'
//	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.12.0'
//	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'com.google.guava:guava:19.0-rc1'
	implementation 'org.springframework:spring-oxm:5.3.9'
	implementation 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-devtools'
//	runtimeOnly 'io.r2dbc:r2dbc-postgresql'
	implementation("org.flywaydb:flyway-core")
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.5'
//	testImplementation 'io.projectreactor:reactor-test'
//	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
//	testImplementation 'org.springframework.security:spring-security-test'
}


jib {
	from {
//		image = 'adoptopenjdk/openjdk11'
		from {
			image = "artifactory.zoomint.com/eleveo/base-images/centos8java11:2.2.9"
			auth {
				username = "scopic.dbilyk"
				password = "KAmEw2Xumu"
			}
		}
//		auth {
//			username = findProperty("username") ?: 'username'
//			password = findProperty("password") ?: 'password'
//		}
	}
	to {
		image = "03564503d/time/${project.name}"
		tags = ['latest', project.version]
//		auth {
//			username = findProperty("username") ?: 'username'
//			password = findProperty("password") ?: 'password'
//		}
	}
	container.mainClass = "com.learn.time.time.TimeApplication"
	container.creationTime = "USE_CURRENT_TIMESTAMP"

	extraDirectories {
		paths {
			path {
				from = "src/main/jib/security"
				into = "/etc/java/java-11-openjdk/java-11-openjdk-11.0.9.11-3.el8_3.x86_64/conf/security/"
			}
		}
	}
}

helm {
	charts {
		create("time") {
			chartName.set("time")
			chartVersion.set("${project.version}")
			sourceDir.set(file("helm"))
			filtering {
				values.put("dockerTag", project.version)
				values.put("dockerRepository", "")
				values.put("imageName", "03564503d/${project.name}")
			}
		}
	}

//	publishing {
//		repositories {
//			create<org.unbrokendome.gradle.plugins.helm.publishing.dsl.CustomHelmPublishingRepository>("jfrogArtifactory") {
//				url.set(uri("http://artifactory.zoomint.com/"))
//				uploadMethod.set("PUT")
//				// We need to specify the file name in the url due to
//				// inability of JFrog to figure out the file name from
//				// the file which is being uploaded
//				uploadPath.set("artifactory/helmcharts/wfo-analytics/${project.name}-${project.version}.tgz")
//				credentials {
//					username.set(System.getProperty("username"))
//					password.set(System.getProperty("password"))
//				}
//			}
//		}
//	}
}


test {
	useJUnitPlatform()
}


